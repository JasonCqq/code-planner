generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

model User {
    id           String        @id @default(uuid())
    username     String        @unique
    email        String        @unique
    password     String
    creationDate DateTime      @default(now())
    folders      Folder[]
    links        Link[]
    userSettings UserSettings?
    shares       Share[]
    otp          String?
    otpVerified  Boolean       @default(false)
    otpExpiresAt DateTime?
}

model UserSettings {
    id       String  @id @default(uuid())
    user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String  @unique
    previews Boolean @default(true)
}

model Session {
    id        String   @id
    sid       String   @unique
    data      String
    expiresAt DateTime
}

model Folder {
    id      String  @id @default(uuid())
    name    String
    user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId  String?
    links   Link[]
    private Boolean @default(true)
    shares  Share?
}

model Share {
    id       Int     @id @default(autoincrement())
    user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId   String?
    public   Boolean @default(false)
    folder   Folder  @relation(fields: [folderId], references: [id], onDelete: Cascade)
    folderId String  @unique
    password String?
}

model Link {
    id         String    @id @default(uuid())
    user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId     String?
    url        String
    folder     Folder?   @relation(fields: [folderId], references: [id])
    folderId   String?
    title      String
    createdAt  DateTime  @default(now())
    updatedAt  DateTime? @updatedAt
    bookmarked Boolean
    thumbnail  Bytes
    remind     DateTime?
    trash      Boolean?  @default(false)
}
