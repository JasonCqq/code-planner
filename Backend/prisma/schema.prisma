generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model tempUser {
  id           String    @id @default(uuid())
  username     String    @unique
  email        String    @unique
  password     String
  otp          String?
  otpExpiresAt DateTime?
}

model User {
  id           String        @id @default(uuid())
  username     String        @unique
  email        String        @unique
  password     String
  creationDate DateTime      @default(now())
  otp          String?
  otpVerified  Boolean       @default(false)
  otpExpiresAt DateTime?
  folders      Folder[]
  links        Link[]
  shares       Share[]
  userSettings UserSettings?
}

model UserSettings {
  id       String  @id @default(uuid())
  userId   String  @unique
  previews Boolean @default(true)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  sid       String   @unique
  data      String
  expiresAt DateTime
}

model Folder {
  id      String  @id @default(uuid())
  name    String
  userId  String?
  private Boolean @default(true)
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
  links   Link[]
  shares  Share?
}

model Share {
  id       Int     @id @default(autoincrement())
  userId   String?
  public   Boolean @default(false)
  folderId String  @unique
  password String?
  folder   Folder  @relation(fields: [folderId], references: [id], onDelete: Cascade)
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Link {
  id         String    @id @default(uuid())
  userId     String?
  url        String
  folderId   String?
  title      String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
  bookmarked Boolean
  thumbnail  String?
  remind     DateTime?
  trash      Boolean?  @default(false)
  folder     Folder?   @relation(fields: [folderId], references: [id])
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  pURL       String?
}
